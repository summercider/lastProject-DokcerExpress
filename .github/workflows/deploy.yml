name: Deploy Express App

on:
  push:
    # main 브랜치에 push 발생하면 실행
    branches: [main]

jobs:
  deploy:
    name: Deploy to EC2
    # 깃헙액션이 우분투 최신, 안정적인 버전으로 실행
    runs-on: ubuntu-latest

    steps:
      # 저장소 소스 가져오기
      - name: Checkout code
        uses: actions/checkout@v3

      # 호스트 키 등록
      - name: Add EC2 Host to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      # ssh agent로 ssh 인증 준비
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      # 깃헙 시크릿 정보로 .env 생성
      - name: Generate .env file
        run: |
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "COOKIE_SECRET=${{ secrets.COOKIE_SECRET }}" >> .env

      # EC2_USER 값인 /ubuntu/backend 경로로 소스코드 복사, /backend는 변경 가능하며 서비스마다 달라야
      - name: Upload source code to EC2
        run: |
          rsync -avz --exclude node_modules --exclude .git ./ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/ubuntu/backend

      # .env파일 EC2 업로드
      - name: Upload .env to EC2
        run: |
          scp .env ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/ubuntu/backend/.env

      # EC2에 ssh 원격접속하여 기존 도커컨테이너 삭제후 도커이미지 빌드, 컨테이너 실행
      - name: Deploy on EC2
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            cd /home/ubuntu/backend
            sudo docker-compose -f docker-compose.prod.yml down
            sudo docker-compose -f docker-compose.prod.yml up -d --build
          EOF
